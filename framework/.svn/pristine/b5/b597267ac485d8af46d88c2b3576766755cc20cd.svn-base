<?php
/**
 * Created by PhpStorm.
 * User: sahara
 * Date: 2017/11/1
 * Time: 10:44
 */

class memberControl extends bank_apiControl
{



    /**
     * app注册member
     * @return result
     */
    public function createOp()
    {

        $params = array_merge(array(),$_GET,$_POST);
        // 设置必须的参数
        if(
            empty($params['login_code']) || empty($params['family_name']) || empty($params['given_name']) || empty($params['password'])
            || empty($params['phone']) || empty($params['country_code']  )
        )
        {
            return new result(false,'Lack of param',null,errorCodesEnum::DATA_LACK);
        }

        $rt = memberClass::addMember($params);
        if( !$rt->STS ){
            return $rt;
        }

        return new result(true,'Success',$rt->DATA);


    }


    /**
     * member app 登陆
     * @return result
     */
    public function appLoginOp()
    {
        $params = array_merge(array(),$_GET,$_POST);
        if( empty($params['login_code']) ){  // 第三方登陆的不会有密码  login_password
            return new result(false,'Invalid param',null,errorCodesEnum::DATA_LACK);
        }
        $m_member = new memberModel();

        // passport 通行的方式
        $pass_type = isset($params['passport_type'])?$params['passport_type']:0;
        $rt = memberClass::checkPassport(array(
            'login_code' => $params['login_code'],
            'login_password' => $params['login_password']
        ),$pass_type);

        if( !$rt->STS ){
            return new result(false,'Login fail',null,errorCodesEnum::UNEXPECTED_DATA);
        }
        $o_member = $rt->DATA;
        $member = $m_member->getRow($o_member['uid']);  // 防止错误返回
        if( !$member ){
            return new result(false,'Login fail',null,errorCodesEnum::UNEXPECTED_DATA);
        }

        $login_ip = getIp();
        $member->last_login_time = Now();
        $member->last_login_ip = $login_ip;
        $member->update();

        // 创建token令牌
        $m_member_token = new member_tokenModel();
        $token_row = $m_member_token->newRow();
        $token_row->member_id = $member->uid;
        $token_row->login_code = $member->login_code;
        $token_row->token = md5($params['login_code'].time());
        $token_row->create_time = Now();
        $token_row->login_time = Now();
        $token_row->client_type = $params['client_type'];
        $insert = $token_row->insert();
        if( !$insert->STS ){
            return new result(false,'Create token fail',null,errorCodesEnum::DB_ERROR);
        }

        $m_member_login_log = new member_login_logModel();
        $log = $m_member_login_log->newRow();
        $log->member_id = $member->uid;
        $log->client_id = $params['client_id'];
        $log->client_type = $params['client_type'];
        $log->login_time = Now();
        $log->login_ip = $login_ip;
        $log->login_area = '';  // todo ip获取区域？
        $insert = $log->insert();
        if( !$insert->STS ){
            return new result(false,'Log error',null,errorCodesEnum::DB_ERROR);
        }

        $member_info = $member->toArray();
        unset($member_info['login_password']);

        $member_info['grade_code'] = '';
        $member_info['grade_caption'] = '';
        $m_member_grade = new member_gradeModel();
        $grade_info = $m_member_grade->getRow(array(
            'grade_code' => $member->member_grade,
        ));
        if( $grade_info ){
            $member_info['grade_code'] = $grade_info->grade_code;
            $member_info['grade_caption'] = $grade_info->grade_caption;
        }
        return new result(true,'Login success',array(
            'token' => $token_row->token,
            'member_info' => $member_info
        ));

    }


}