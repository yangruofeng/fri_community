<?php
/**
 * Created by PhpStorm.
 * User: sahara
 * Date: 2017/11/9
 * Time: 16:00
 */

class memberClass
{

    public function __construct()
    {
    }


    public static function addMember($params)
    {

        $m_member = M('member');

        // 重复检测 用户、电话
        $member = $m_member->getRow(array(
            'login_code' => $params['login_code']
        ));
        if( $member ){
            return new result(false,'Member exist',null,errorCodesEnum::USER_EXIST);
        }
        $format_phone = tools::getFormatPhone($params['country_code'],$params['phone']);
        $contact_phone = $format_phone['contact_phone'];

        if( $contact_phone ){
            $member = $m_member->getRow(array(
                'phone_id' => $contact_phone
            ));
            if( $member ){
                return new result(false,'Phone used',null,errorCodesEnum::PHONE_USED);
            }
        }

        $member = $m_member->newRow();
        $member->obj_guid = 0;
        $member->login_code = $params['login_code'];
        $member->login_password = md5($params['password']);
        $member->family_name = $params['family_name'];
        $member->given_name = $params['given_name'];
        $member->initials = strtoupper(substr(trim($params['family_name']),0,1));  // todo 默认是英语的
        $member->display_name = $params['family_name'].' '.$params['given_name'];
        $member->alias_name = $params['alias_name'];
        $member->is_staff = intval($params['is_staff'])?:0;
        $member->gender = $params['gender'];
        $member->civil_status = $params['civil_status'];
        $member->birthday = $params['birthday'];
        $member->phone_contry = $params['country_code'];
        $member->phone_id = $contact_phone;
        $member->email = $params['email'];
        $member->member_property = $params['member_property'];
        $member->member_profile = $params['member_profile'];
        $member->member_grade = $params['member_grade']?:0;
        $member->member_officer = $params['member_officer']?:0;
        $member->member_image = $params['member_image'];
        $member->member_icon = $params['member_icon'];
        $member->open_source = isset($params['open_source'])?intval($params['open_source']):memberSourceEnum::ONLINE;
        $member->open_org = $params['open_org']?:0;
        $member->open_addr = $params['open_addr']?:null;
        $member->member_state = memberStateEnum::CREATE;
        $member->create_time = date('Y-m-d H:i:s');
        $member->creator_id = 0;
        $insert = $member->insert();
        if( !$insert->STS ){
            return new result(false,'Create member fail',null,errorCodesEnum::DB_ERROR);
        }

        $member->obj_guid = intval(strval(objGuidTypeEnum::CLIENT_MEMBER ).$member->uid);
        $up = $member->update();
        if( !$up->STS ){
            return new result(false,'Create member GUID fail',null,errorCodesEnum::DB_ERROR);
        }

        return new result(true,'success',$member);
    }


    /**
     * 检查member的passport通行，第三方不自动注册
     * @param $param
     * @param int $pass_type
     * @return result
     */
    public static function checkPassport($param,$pass_type=0)
    {
        $login_code = $param['login_code'];
        $login_pwd = $param['login_password'];

        $m_member = new memberModel();
        $m_member_passport = new member_passportModel();

        $passport = $m_member_passport->orderBy('uid desc')->getRow(array(  // 有可能有不同来源同一个passport_account
            'passport_type' => $pass_type,
            'passport_account' =>$login_code,
            'is_invalid' => 0
        ));

        if( $passport ){ // 通行有效

            $member = $m_member->getRow($passport->member_id);
            if( !$member ){
                return new result(false);
            }
            return new result(true,'',$member); // 登陆成功

        }else{
            // 没有有效通行令牌的登陆
            $member = $m_member->getRow(array(
                'login_code' => $login_code
            ));


            if( $pass_type == 0 ){
                // 注册会员的密码登陆
                if( !$member ){
                    return new result(false);
                }

                if( $member->login_password != md5($login_pwd) ){
                    return new result(false);
                }

                $new_pass = $m_member_passport->newRow();
                $new_pass->member_id = $member->uid;
                $new_pass->passport_type = $pass_type;
                $new_pass->passport_account = $login_code;
                $new_pass->passport_token = md5($login_code.time());
                $new_pass->insert();

                return new result(true,'',$member);

            }else{
                // 第三方登陆
                //  todo 是否登陆的时候自动创建会员
                if( !$member ){
                    return new result(false);
                }

                if( $member->open_source != memberSourceEnum::THIRD ){
                    return new result(false);
                }

                $new_pass = $m_member_passport->newRow();
                $new_pass->member_id = $member->uid;
                $new_pass->passport_type = $pass_type;
                $new_pass->passport_account = $login_code;
                $new_pass->passport_token = md5($login_code.time());
                $new_pass->insert();

                return new result(true,'',$member);

            }

        }

        return new result(false);

    }

    public static function createPassport($param)
    {

    }

}