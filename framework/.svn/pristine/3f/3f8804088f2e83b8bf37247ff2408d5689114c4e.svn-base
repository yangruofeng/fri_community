<?php
/**
 * Created by PhpStorm.
 * User: sahara
 * Date: 2017/11/1
 * Time: 14:07
 */
class phoneControl extends bank_apiControl
{

    /**
     * 获取发送短信验证码的冷却时间
     * @return result  时间是s
     */
    public function verifyCoolTimeOp()
    {

        return new result(true,'',phoneCodeCDEnum::CD);

    }

    /**
     * 发送短信验证码,被member验证过的不再验证
     * @return result
     */
    public function sendCodeOp()
    {
        // 做安全处理
        $rt = $this->checkAppSign();
        if( !$rt->STS ){
            return $rt;
        }
        $params = array_merge(array(),$_GET,$_POST);
        $country_code = $params['country_code'];
        $phone_number = $params['phone'];
        $format_phone = tools::getFormatPhone($country_code,$phone_number);
        $contact_phone = $format_phone['contact_phone'];
        // 检查合理性
        if( !isPhoneNumber($contact_phone) ){
            return new result(false,'Invalid phone',null,errorCodesEnum::INVALID_PARAM);
        }

        $m_phone_verify_code = M('phone_verify_code');

        // 判断是否被其他member验证过
        $m_member = new memberModel();
        $row = $m_member->getRow(array(
            'phone_id'
        ));
        if( $row && $row->is_verify_phone ){
            return new result(false,'Has verified',null,errorCodesEnum::PHONE_VERIFIED);
        }


        // 是否在冷却时间内
        $verify_row = $m_phone_verify_code->where(array(
            'phone_id' => $contact_phone,
        ))->orderBy('uid desc')->find();
        $last_time = $verify_row['create_time']?:0;
        if( (time()-$last_time) <= phoneCodeCDEnum::CD ){
            return new result(false,'Wrong time',null,errorCodesEnum::NOT_PERMITTED);
        }

        // 发送短信验证码
        $verify_code = mt_rand(100001,999999);

        $smsHandler = new smsHandler();
        $rt = $smsHandler->sendVerifyCode($contact_phone,$verify_code);
        if( !$rt->STS ){
            return new result(false,'Send code fail',null,errorCodesEnum::API_FAILED);
        }

        $sms_row = $rt->DATA;
        $new_row = $m_phone_verify_code->newRow();
        $new_row->phone_country = $country_code;
        $new_row->phone_id = $contact_phone;
        $new_row->verify_code = $verify_code;
        $new_row->create_time = Now();
        $new_row->sms_id = $sms_row->uid;
        $insert = $new_row->insert();
        if( !$insert->STS ){
            return new result(false,'Insert verify code fail',null,errorCodesEnum::DB_ERROR);
        }
        $verify_id = $insert->AUTO_ID;

        return new result(true,'success',array(
            'verify_id' => $verify_id,
            'phone_id' => $contact_phone
        ));


    }


    /**
     * 验证短信验证码
     * @return result
     */
    public function verifyCodeOp()
    {

        $params = array_merge(array(),$_GET,$_POST);
        $verify_id = $params['verify_id'];
        $verify_code = $params['verify_code'];
        if( !$verify_id || !$verify_code ){
            return new result(false,'Invalid param',null,errorCodesEnum::DATA_LACK);
        }
        $m_phone_verify_code = new phone_verify_codeModel();
        $row = $m_phone_verify_code->getRow($verify_id);
        if( !$row ){
            return new result(false,'No data',null,errorCodesEnum::UNEXPECTED_DATA);
        }
        if( $row->verify_code != $verify_code ){
            return new result(false,'Verify fail',null,errorCodesEnum::UNEXPECTED_DATA);
        }
        $row->state = 1;
        $up = $row->update();
        if( !$up->STS ){
            return new result(false,'Update data fail',null,errorCodesEnum::DB_ERROR);
        }
        return new result(true,'Verify success');

    }

}